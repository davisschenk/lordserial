use simple_endian::*;

const PACKET: [u8 ; 100] = [0x75, 0x65, 0x80, 0x5E, 0x0E, 0x12, 0x40, 0x67, 0xD2, 0x7E, 0xF9, 0xDB, 0x22, 0xD1, 0x00, 0x00, 0x00, 0x06, 0x12, 0x0A, 0x3C, 0xB5, 0x86, 0xAA, 0x3D, 0xBE, 0xB0, 0x7E, 0x3F, 0x7E, 0xD0, 0x90, 0x3C, 0x10, 0xE8, 0xAB, 0x0E, 0x0C, 0x40, 0x47, 0xAB, 0x6C, 0x3D, 0x2D, 0xFD, 0xDC, 0x40, 0x3D, 0x17, 0xF4, 0x0E, 0x04, 0x3D, 0x36, 0xFC, 0xEA, 0xBC, 0xBE, 0x8D, 0xC0, 0x3F, 0x7F, 0x96, 0xDC, 0x0E, 0x05, 0x3A, 0x0A, 0x45, 0x73, 0x3A, 0xFB, 0x74, 0x4F, 0x3A, 0x6E, 0x7B, 0x95, 0x0E, 0x06, 0xBE, 0xD5, 0x4B, 0x19, 0x3D, 0x9D, 0x18, 0xC7, 0xBB, 0xE2, 0xCB, 0xE8, 0x06, 0x17, 0x44, 0x53, 0x1B, 0xB8, 0x3D, 0x55];
const FIELD: [u8 ; 0x0E] = [0x0E, 0x0C, 0x40, 0x47, 0xAB, 0x6C, 0x3D, 0x2D, 0xFD, 0xDC, 0x40, 0x3D, 0x17, 0xF4];

#[derive(Clone, Copy)]
#[repr(packed)]
struct AngleField {
    size: u8,
    descriptor: u8,
    
    roll: f32be,
    pitch: f32be,
    yaw: f32be
}

union EulerAngle {
    angles: AngleField,
    raw: [u8 ; 0x0E]
}

#[derive(Clone, Copy)]
#[repr(packed)]
struct GPSTimeField {
    size: u8,
    descriptor: u8,

    tow: f64be,
    week: u16be,
    flags: u16be
}

union GPSTime {
    time: GPSTimeField,
    raw: [u8 ; 0x0E]
}

fn main() {
    let u = EulerAngle {raw : FIELD};
    // let start = std::ptr::addr_of!({PACKET});
    // println!("{:?}", start);
    unsafe {
        let rp = std::ptr::addr_of!(u.angles.roll);
        let val = rp.read_unaligned();
        println!("{}", {u.angles.pitch});
        // 4 + 0x0E
        // println!("{:02X} {:02X}", u.angles.size, u.angles.descriptor);
        // println!("{} {} {}", u.angles.roll,u.angles.pitch,u.angles.yaw);
    }
}
